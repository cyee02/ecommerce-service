// Code generated by MockGen. DO NOT EDIT.
// Source: db/db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/cyee02/ecommerce-service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDbInf is a mock of DbInf interface.
type MockDbInf struct {
	ctrl     *gomock.Controller
	recorder *MockDbInfMockRecorder
}

// MockDbInfMockRecorder is the mock recorder for MockDbInf.
type MockDbInfMockRecorder struct {
	mock *MockDbInf
}

// NewMockDbInf creates a new mock instance.
func NewMockDbInf(ctrl *gomock.Controller) *MockDbInf {
	mock := &MockDbInf{ctrl: ctrl}
	mock.recorder = &MockDbInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbInf) EXPECT() *MockDbInfMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDbInf) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDbInfMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDbInf)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockDbInf) DeleteUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDbInfMockRecorder) DeleteUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDbInf)(nil).DeleteUser), user)
}

// GetAllUsers mocks base method.
func (m *MockDbInf) GetAllUsers() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockDbInfMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDbInf)(nil).GetAllUsers))
}

// GetUserByEmail mocks base method.
func (m *MockDbInf) GetUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDbInfMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDbInf)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockDbInf) GetUserById(userId string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockDbInfMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockDbInf)(nil).GetUserById), userId)
}

// UpdateUser mocks base method.
func (m *MockDbInf) UpdateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDbInfMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDbInf)(nil).UpdateUser), user)
}
